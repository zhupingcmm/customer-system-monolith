<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mf.projects.customer.system.mapper.CustomerStaffMapper">
    <resultMap id="CustomerStaffMap" type="com.mf.projects.customer.system.entity.staff.CustomerStaff">
        <result property="id" column="id"/>
        <result property="groupId" column="group_id"/>
        <result property="staffName" column="staff_name"/>
        <result property="nickname" column="nickname"/>
        <result property="accountId" column="account_id"/>
        <result property="systemId" column="system_id"/>
        <result property="avatar" column="avatar"/>
        <result property="phone" column="phone"/>
        <result property="gender" column="gender"/>
        <result property="goodAt" column="good_at"/>
        <result property="isAutoReply" column="is_auto_reply"/>
        <result property="welcomeMessage" column="welcome_message"/>
        <result property="status" column="status"/>
        <result property="remark" column="remark"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>
    <insert id="createCustomerStaff" parameterType="CustomerStaff">
        insert into `customer_system`.customer_staff
        (group_id, staff_name, nickname, account_id, system_id, avatar, phone, gender, good_at, is_auto_reply, welcome_message, status, remark, is_deleted)
        values
        (#{groupId}, #{staffName}, #{nickname}, #{accountId}, #{systemId}, #{avatar}, #{phone}, #{gender}, #{goodAt}, #{isAutoReply}, #{welcomeMessage}, #{status}, #{remark}, #{isDeleted})
    </insert>
    <insert id="createCustomerStaffs" parameterType="CustomerStaff">
        insert into `customer_system`.customer_staff
            (group_id, staff_name, nickname, account_id, system_id, avatar, phone, gender, good_at, is_auto_reply, welcome_message, status, remark, is_deleted)
        values
            <foreach collection="customerStaffs" item="model" separator=",">
                (#{groupId}, #{staffName}, #{nickname}, #{accountId}, #{systemId}, #{avatar}, #{phone}, #{gender}, #{goodAt}, #{isAutoReply}, #{welcomeMessage}, #{status}, #{remark}, #{isDeleted})
            </foreach>
    </insert>
    <select id="findCustomerStaffById" resultMap="CustomerStaffMap" parameterType="java.lang.Long">
        select * from `customer_system`.customer_staff where id = #{staffId}
    </select>
    <delete id="deleteCustomerStaffById" parameterType="java.lang.Long">
        delete  from `customer_system`.customer_staff where id = #{staffId};
    </delete>
    <update id="updateCustomerStaff" parameterType="CustomerStaff">
        update `customer_system`.customer_staff
        <set>
            group_id = #{groupId},
            account_id = #{accountId},
            staff_name = #{staffName},
            nickname = #{nickname},
            status = #{status},
            avatar = #{avatar},
            phone = #{phone},
            gender = #{gender},
            good_at = #{goodAt},
            welcome_message = #{welcomeMessage},
            remark = #{remark}
        </set>
        <where>
            id = #{id};
        </where>
    </update>

    <select id="findAllCustomerStaffs" resultMap="CustomerStaffMap">
        select * from  `customer_system`.customer_staff
    </select>

    <select id="findCustomerStaffs" resultMap="CustomerStaffMap">
        select * from  `customer_system`.customer_staff
        limit #{start}, #{offset}
    </select>

    <select id="findCustomerStaffsByName" resultMap="CustomerStaffMap">
        select * from  `customer_system`.customer_staff
        <where>
            staff_name = #{staffName}
        </where>
        limit #{start}, #{offset}
    </select>
</mapper>
